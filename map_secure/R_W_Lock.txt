首先了解什么是读写锁：

是一种同步机制，允许多个线程同时读取共享数据，但在写入数据时，只有一个线程可以访问，而其他线程（无论读写）都会被阻塞。

读锁（RLock）：多个线程可以同时获取读锁，不会相互阻塞。

写锁（Lock）：获取写锁的线程会阻塞其他读写线程，直到写操作完成。

什么是线程安全：

线程安全的 Map 是一种可以在多线程环境中安全访问的哈希表数据结构，保证多个线程同时操作不会导致数据竞争或不一致。

方法一：Go 提供的并发安全 Map，不需要显式加锁，适用于读多写少的场景。

方法二：自己实现加锁的 Map：在普通的 map 上加锁，常用 sync.Mutex 或 sync.RWMutex。


如何实现：
1. 全局锁
2. 分段锁
3. 原子操作


学习到的知识：

学会理解 sync.Mutex 和 sync.RWMutex 的用法
熟悉 Go 内存模型和 Goroutine 的运行机制
锁的基本操作和性能对比
多线程编程的基础技巧
如何设计线程安全的数据结构为构建高性能并发程序打下基础。


可拓展方面：
用线程安全 Map 实现一个简单的缓存服务 支持读写并发
模拟高并发场景，测试锁的性能
